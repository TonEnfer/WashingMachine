
v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002e6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000142  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000dc  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000119  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001aa  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_7>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 ee       	ldi	r30, 0xE6	; 230
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  a2:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z15LimitSwith_initv>:
#include "LimitSwitch.h"

void LimitSwith_init(void)
{
	//Port init
	lsw1_DDR &= ~_BV(lsw1_PIN);
  aa:	53 98       	cbi	0x0a, 3	; 10
	lsw1_PORT |= _BV(lsw1_PIN);
  ac:	5b 9a       	sbi	0x0b, 3	; 11
	
	lsw2_DDR &= ~_BV(lsw2_PIN);
  ae:	54 98       	cbi	0x0a, 4	; 10
	lsw2_PORT |= _BV(lsw2_PIN);
  b0:	5c 9a       	sbi	0x0b, 4	; 11
	
	lsw3_DDR &= ~_BV(lsw3_PIN);
  b2:	55 98       	cbi	0x0a, 5	; 10
	lsw3_PORT |= _BV(lsw3_PIN);
  b4:	5d 9a       	sbi	0x0b, 5	; 11
	
	lsw4_DDR &= ~_BV(lsw4_PIN);
  b6:	56 98       	cbi	0x0a, 6	; 10
	lsw4_PORT |= _BV(lsw4_PIN);
  b8:	5e 9a       	sbi	0x0b, 6	; 11
	
	lsw5_DDR &= ~_BV(lsw5_PIN);
  ba:	57 98       	cbi	0x0a, 7	; 10
	lsw5_PORT |= _BV(lsw5_PIN);
  bc:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Interrupt init
	lsw_ISR_PCICR |= _BV(lsw_ISR_PCIE);
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	lsw_ISR_PCMSK |= _BV(lsw1_ISR_PCINT) | _BV(lsw2_ISR_PCINT) |
	_BV(lsw3_ISR_PCINT) | _BV(lsw4_ISR_PCINT) | _BV(lsw5_ISR_PCINT);
  c8:	e3 e7       	ldi	r30, 0x73	; 115
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 6f       	ori	r24, 0xF8	; 248
  d0:	80 83       	st	Z, r24
	
	DDRB = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  d6:	15 b8       	out	0x05, r1	; 5
  d8:	08 95       	ret

000000da <__vector_7>:
}

ISR (PCINT3_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	switch(lsw_PINS)
  fc:	89 b1       	in	r24, 0x09	; 9
  fe:	80 32       	cpi	r24, 0x20	; 32
 100:	81 f0       	breq	.+32     	; 0x122 <__vector_7+0x48>
 102:	28 f4       	brcc	.+10     	; 0x10e <__vector_7+0x34>
 104:	88 30       	cpi	r24, 0x08	; 8
 106:	99 f0       	breq	.+38     	; 0x12e <__vector_7+0x54>
 108:	80 31       	cpi	r24, 0x10	; 16
 10a:	71 f0       	breq	.+28     	; 0x128 <__vector_7+0x4e>
 10c:	13 c0       	rjmp	.+38     	; 0x134 <__vector_7+0x5a>
 10e:	80 34       	cpi	r24, 0x40	; 64
 110:	29 f0       	breq	.+10     	; 0x11c <__vector_7+0x42>
 112:	80 38       	cpi	r24, 0x80	; 128
 114:	79 f4       	brne	.+30     	; 0x134 <__vector_7+0x5a>
	{
		case 0b10000000:
		PORTB = 0b00000001; break;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	85 b9       	out	0x05, r24	; 5
 11a:	0f c0       	rjmp	.+30     	; 0x13a <__vector_7+0x60>
		case 0b01000000:
		PORTB = 0b00000010; break;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	85 b9       	out	0x05, r24	; 5
 120:	0c c0       	rjmp	.+24     	; 0x13a <__vector_7+0x60>
		case 0b00100000:
		PORTB = 0b00000100; break;
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	85 b9       	out	0x05, r24	; 5
 126:	09 c0       	rjmp	.+18     	; 0x13a <__vector_7+0x60>
		case 0b00010000:
		PORTB = 0b00001000; break;
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	06 c0       	rjmp	.+12     	; 0x13a <__vector_7+0x60>
		case 0b00001000:
		PORTB = 0b00010000; break;
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	85 b9       	out	0x05, r24	; 5
 132:	03 c0       	rjmp	.+6      	; 0x13a <__vector_7+0x60>
		default:
		PORTB = rand(); break;
 134:	0e 94 fe 00 	call	0x1fc	; 0x1fc <rand>
 138:	85 b9       	out	0x05, r24	; 5
	}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:
#include "LimitSwitch.h"


int main(void)
{
	LimitSwith_init();
 15c:	0e 94 55 00 	call	0xaa	; 0xaa <_Z15LimitSwith_initv>
	sei();
 160:	78 94       	sei

#include <avr/io.h>
#include "LimitSwitch.h"


int main(void)
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x6>

00000164 <do_rand>:
 164:	8f 92       	push	r8
 166:	9f 92       	push	r9
 168:	af 92       	push	r10
 16a:	bf 92       	push	r11
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
 17a:	68 81       	ld	r22, Y
 17c:	79 81       	ldd	r23, Y+1	; 0x01
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	9b 81       	ldd	r25, Y+3	; 0x03
 182:	61 15       	cp	r22, r1
 184:	71 05       	cpc	r23, r1
 186:	81 05       	cpc	r24, r1
 188:	91 05       	cpc	r25, r1
 18a:	21 f4       	brne	.+8      	; 0x194 <do_rand+0x30>
 18c:	64 e2       	ldi	r22, 0x24	; 36
 18e:	79 ed       	ldi	r23, 0xD9	; 217
 190:	8b e5       	ldi	r24, 0x5B	; 91
 192:	97 e0       	ldi	r25, 0x07	; 7
 194:	2d e1       	ldi	r18, 0x1D	; 29
 196:	33 ef       	ldi	r19, 0xF3	; 243
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodsi4>
 1a0:	49 01       	movw	r8, r18
 1a2:	5a 01       	movw	r10, r20
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
 1a8:	a7 ea       	ldi	r26, 0xA7	; 167
 1aa:	b1 e4       	ldi	r27, 0x41	; 65
 1ac:	0e 94 2d 01 	call	0x25a	; 0x25a <__muluhisi3>
 1b0:	6b 01       	movw	r12, r22
 1b2:	7c 01       	movw	r14, r24
 1b4:	ac ee       	ldi	r26, 0xEC	; 236
 1b6:	b4 ef       	ldi	r27, 0xF4	; 244
 1b8:	a5 01       	movw	r20, r10
 1ba:	94 01       	movw	r18, r8
 1bc:	0e 94 3b 01 	call	0x276	; 0x276 <__mulohisi3>
 1c0:	dc 01       	movw	r26, r24
 1c2:	cb 01       	movw	r24, r22
 1c4:	8c 0d       	add	r24, r12
 1c6:	9d 1d       	adc	r25, r13
 1c8:	ae 1d       	adc	r26, r14
 1ca:	bf 1d       	adc	r27, r15
 1cc:	b7 ff       	sbrs	r27, 7
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <do_rand+0x72>
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	a1 09       	sbc	r26, r1
 1d4:	b0 48       	sbci	r27, 0x80	; 128
 1d6:	88 83       	st	Y, r24
 1d8:	99 83       	std	Y+1, r25	; 0x01
 1da:	aa 83       	std	Y+2, r26	; 0x02
 1dc:	bb 83       	std	Y+3, r27	; 0x03
 1de:	9f 77       	andi	r25, 0x7F	; 127
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	08 95       	ret

000001f6 <rand_r>:
 1f6:	0e 94 b2 00 	call	0x164	; 0x164 <do_rand>
 1fa:	08 95       	ret

000001fc <rand>:
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 b2 00 	call	0x164	; 0x164 <do_rand>
 204:	08 95       	ret

00000206 <srand>:
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	80 93 00 01 	sts	0x0100, r24
 20e:	90 93 01 01 	sts	0x0101, r25
 212:	a0 93 02 01 	sts	0x0102, r26
 216:	b0 93 03 01 	sts	0x0103, r27
 21a:	08 95       	ret

0000021c <__divmodsi4>:
 21c:	05 2e       	mov	r0, r21
 21e:	97 fb       	bst	r25, 7
 220:	1e f4       	brtc	.+6      	; 0x228 <__divmodsi4+0xc>
 222:	00 94       	com	r0
 224:	0e 94 25 01 	call	0x24a	; 0x24a <__negsi2>
 228:	57 fd       	sbrc	r21, 7
 22a:	07 d0       	rcall	.+14     	; 0x23a <__divmodsi4_neg2>
 22c:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodsi4>
 230:	07 fc       	sbrc	r0, 7
 232:	03 d0       	rcall	.+6      	; 0x23a <__divmodsi4_neg2>
 234:	4e f4       	brtc	.+18     	; 0x248 <__divmodsi4_exit>
 236:	0c 94 25 01 	jmp	0x24a	; 0x24a <__negsi2>

0000023a <__divmodsi4_neg2>:
 23a:	50 95       	com	r21
 23c:	40 95       	com	r20
 23e:	30 95       	com	r19
 240:	21 95       	neg	r18
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	4f 4f       	sbci	r20, 0xFF	; 255
 246:	5f 4f       	sbci	r21, 0xFF	; 255

00000248 <__divmodsi4_exit>:
 248:	08 95       	ret

0000024a <__negsi2>:
 24a:	90 95       	com	r25
 24c:	80 95       	com	r24
 24e:	70 95       	com	r23
 250:	61 95       	neg	r22
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	8f 4f       	sbci	r24, 0xFF	; 255
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	08 95       	ret

0000025a <__muluhisi3>:
 25a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__umulhisi3>
 25e:	a5 9f       	mul	r26, r21
 260:	90 0d       	add	r25, r0
 262:	b4 9f       	mul	r27, r20
 264:	90 0d       	add	r25, r0
 266:	a4 9f       	mul	r26, r20
 268:	80 0d       	add	r24, r0
 26a:	91 1d       	adc	r25, r1
 26c:	11 24       	eor	r1, r1
 26e:	08 95       	ret

00000270 <__mulshisi3>:
 270:	b7 ff       	sbrs	r27, 7
 272:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__muluhisi3>

00000276 <__mulohisi3>:
 276:	0e 94 2d 01 	call	0x25a	; 0x25a <__muluhisi3>
 27a:	82 1b       	sub	r24, r18
 27c:	93 0b       	sbc	r25, r19
 27e:	08 95       	ret

00000280 <__udivmodsi4>:
 280:	a1 e2       	ldi	r26, 0x21	; 33
 282:	1a 2e       	mov	r1, r26
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	fd 01       	movw	r30, r26
 28a:	0d c0       	rjmp	.+26     	; 0x2a6 <__udivmodsi4_ep>

0000028c <__udivmodsi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	ee 1f       	adc	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	a2 17       	cp	r26, r18
 296:	b3 07       	cpc	r27, r19
 298:	e4 07       	cpc	r30, r20
 29a:	f5 07       	cpc	r31, r21
 29c:	20 f0       	brcs	.+8      	; 0x2a6 <__udivmodsi4_ep>
 29e:	a2 1b       	sub	r26, r18
 2a0:	b3 0b       	sbc	r27, r19
 2a2:	e4 0b       	sbc	r30, r20
 2a4:	f5 0b       	sbc	r31, r21

000002a6 <__udivmodsi4_ep>:
 2a6:	66 1f       	adc	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	1a 94       	dec	r1
 2b0:	69 f7       	brne	.-38     	; 0x28c <__udivmodsi4_loop>
 2b2:	60 95       	com	r22
 2b4:	70 95       	com	r23
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	9b 01       	movw	r18, r22
 2bc:	ac 01       	movw	r20, r24
 2be:	bd 01       	movw	r22, r26
 2c0:	cf 01       	movw	r24, r30
 2c2:	08 95       	ret

000002c4 <__umulhisi3>:
 2c4:	a2 9f       	mul	r26, r18
 2c6:	b0 01       	movw	r22, r0
 2c8:	b3 9f       	mul	r27, r19
 2ca:	c0 01       	movw	r24, r0
 2cc:	a3 9f       	mul	r26, r19
 2ce:	70 0d       	add	r23, r0
 2d0:	81 1d       	adc	r24, r1
 2d2:	11 24       	eor	r1, r1
 2d4:	91 1d       	adc	r25, r1
 2d6:	b2 9f       	mul	r27, r18
 2d8:	70 0d       	add	r23, r0
 2da:	81 1d       	adc	r24, r1
 2dc:	11 24       	eor	r1, r1
 2de:	91 1d       	adc	r25, r1
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
